plugins {
	id 'java'
	id 'idea'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'maven-publish'
	id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
	id 'signing'
}

wrapper {
	gradleVersion = '8.5'
	distributionType = Wrapper.DistributionType.BIN
}

def appGroup = 'io.github.michaljonko'
def appName = 'dynatrace-log4j2-appender'
def appVersion = file('version.txt').text.trim()
def appDesc = 'Log4j2 Appender for Dynatrace Generic Log Ingest'

group = appGroup
version = appVersion
description = appDesc

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
	withJavadocJar()
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
}

ext {
    log4jVersion = '2.17.1'
    httpClientVersion = '4.5.14'
    junitVersion = '5.10.0'
    mockitoVersion = '5.6.0'
    assertjVersion = '3.24.2'
    wiremockVersion = '3.9.1'
    awaitilityVersion = '4.2.0'
    lombokVersion = '1.18.30'
}

dependencies {
    compileOnly "org.apache.logging.log4j:log4j-api:$log4jVersion"
    compileOnly "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.httpcomponents:httpclient:$httpClientVersion"
    annotationProcessor "org.apache.logging.log4j:log4j-core:$log4jVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.wiremock:wiremock:$wiremockVersion"
    testImplementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testCompileOnly "org.apache.logging.log4j:log4j-api:$log4jVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

jar {
	manifest {
		attributes(
				'Built-By': 'Michal Jonko',
				'Build-Timestamp': java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME),
				'Created-By': "Gradle ${gradle.gradleVersion}",
				'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
		)
	}
}

signing {
	sign publishing.publications
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			groupId = appGroup
			artifactId = appName
			version = appVersion

			pom {
				name = appName
				description = appDesc
				url = 'https://michaljonko.github.io/dynatrace-log4j2-appender/'
				licenses {
					license {
						name = 'Apache-2.0'
						url = 'https://raw.githubusercontent.com/michaljonko/dynatrace-log4j2-appender/master/LICENSE'
					}
				}
				developers {
					developer {
						id = 'michaljonko'
						name = 'Michal Jonko'
						email = 'michal.jonko@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:github.com/michaljonko/dynatrace-log4j2-appender.git'
					developerConnection = 'scm:git:ssh://github.com/michaljonko/dynatrace-log4j2-appender.git'
					url = 'https://github.com/michaljonko/dynatrace-log4j2-appender'
				}
			}
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
			username = findProperty('sonatypeUsername') ?: System.getenv("SONATYPE_USER")
			password = findProperty('sonatypePassword') ?: System.getenv("SONATYPE_PASSWORD")
			stagingProfileId = findProperty('sonatypeStagingProfileId') ?: System.getenv("SONATYPE_STAGING_PROFILE_ID")
		}
	}
}

test {
	useJUnitPlatform()
}
